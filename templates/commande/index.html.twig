<!DOCTYPE html>
<html lang="fr">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link href="https://fonts.googleapis.com/css2?family=Oswald:wght@400;700&display=swap" rel="stylesheet">
    <title>Suivi de commande Cin√©ma</title>
    <style>
        body {
            font-family: 'Oswald', sans-serif;
            max-width: 800px;
            margin: 2rem auto;
            padding: 20px;
            background: #f5f5f5;
        }

        .tracker-container {
            background: white;
            padding: 2rem;
            border-radius: 15px;
            box-shadow: 0 4px 12px rgba(0,0,0,0.1);
        }

        .progress-bar {
            height: 10px;
            background: #eee;
            border-radius: 5px;
            margin: 2rem 0;
            overflow: hidden;
            position: relative;
        }

        .progress-fill {
            height: 100%;
            background: #E31837;
            width: 0;
            transition: width 0.5s ease, background-color 0.3s ease;
        }

        .status-message {
            text-align: center;
            font-size: 1.5rem;
            margin: 1rem 0;
            padding: 1rem;
            border-radius: 8px;
            transition: all 0.3s ease;
        }

        .status-steps {
            display: flex;
            justify-content: space-between;
            margin: 2rem 0;
            position: relative;
        }

        .status-step {
            text-align: center;
            z-index: 1;
            width: 20%;
        }

        .step-icon {
            font-size: 2rem;
            margin-bottom: 0.5rem;
        }

        .time-estimation {
            text-align: center;
            color: #666;
            font-style: italic;
            margin-top: 1rem;
        }

        .active-step {
            color: #E31837;
            transform: scale(1.1);
        }

        .pulse {
            animation: pulse 1.5s infinite;
        }

        @keyframes pulse {
            0% { opacity: 1; }
            50% { opacity: 0.5; }
            100% { opacity: 1; }
        }
        .payment-notice {
            text-align: center;
            padding: 1rem;
            margin: 1rem 0;
            background: #fff3f3;
            border: 2px solid #E31837;
            border-radius: 8px;
            animation: pulseBorder 1.5s infinite;
        }

        @keyframes pulseBorder {
            0% { border-color: #E31837; }
            50% { border-color: #ff7b7b; }
            100% { border-color: #E31837; }
        }
    </style>
</head>
<body>
    <div class="tracker-container">
        <div class="progress-bar">
            <div class="progress-fill" id="progress"></div>
        </div>

        <div class="status-steps">
            <div class="status-step" id="step1">
                <div class="step-icon">üìã</div>
                Enregistr√©e
            </div>
            <div class="status-step" id="step2">
                <div class="step-icon">üçø</div>
                Pr√©paration
            </div>
            <div class="status-step" id="step3">
                <div class="step-icon">üé¨</div>
                Pr√™te
            </div>
            <div class="status-step" id="step4">
                <div class="step-icon">üéâ</div>
                Termin√©e
            </div>
        </div>

        <div class="status-message" id="statusMessage"></div>
        <div id="paymentNotice"></div>
    </div>

    <script>
        const statusMap = {
            'Enregistr√©e': {progress: 25, step: 1, emoji: 'üìã'},
            'En cours de pr√©paration': {progress: 50, step: 2, emoji: 'üçø'},
            'En attente de r√©cup√©ration': {progress: 75, step: 3, emoji: 'üé¨'},
            'Termin√©': {progress: 100, step: 4, emoji: 'üéâ'},
            'Annul√©': {progress: 0, step: 0, emoji: '‚ùå'}
        };

        function updateInterface(data) {
            const statusInfo = statusMap[data.statut];
            
            document.getElementById('progress').style.width = statusInfo.progress + '%';
            
            document.querySelectorAll('.status-step').forEach((step, index) => {
                step.classList.toggle('active-step', index < statusInfo.step);
                step.querySelector('.step-icon').classList.toggle('pulse', index + 1 === statusInfo.step);
            });

            const statusMessage = document.getElementById('statusMessage');
            statusMessage.innerHTML = `${statusInfo.emoji} ${getMessage(data.statut)}`;

            // Ajout du message de paiement uniquement quand la commande est pr√™te
            const paymentNotice = document.getElementById('paymentNotice');
            if(data.statut === 'En attente de r√©cup√©ration') {
                paymentNotice.innerHTML = `
                    <div class="payment-notice">
                        <strong>üö® Votre commande est pr√™te !</strong><br>
                        Merci de venir la r√©cup√©rer et r√©gler au comptoir 
                    </div>
                `;
            } else {
                paymentNotice.innerHTML = '';
            }
        }

        function getMessage(statut) {
            switch(statut) {
                case 'Enregistr√©e': return 'Votre commande est enregistr√©e';
                case 'En cours de pr√©paration': return 'Pr√©paration de vos produits en cours';
                case 'En attente de r√©cup√©ration': return 'Votre commande est pr√™te !';
                case 'Termin√©': return 'Bon film ! üé•';
                case 'Annul√©': return 'Commande annul√©e';
                default: return 'Statut inconnu';
            }
        }

        setInterval(() => {
            fetch("{{ path('commande_statut', {'id': commande.id}) }}")
                .then(response => response.json())
                .then(data => updateInterface(data))
                .catch(error => {
                    console.error('Erreur:', error);
                    document.getElementById('statusMessage').innerHTML = '‚ö†Ô∏è Probl√®me de connexion';
                });
        }, 10000);

        updateInterface({statut: "{{ statut }}"});
    </script>
</body>
</html>